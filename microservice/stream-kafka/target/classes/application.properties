spring.application.name=spring-cloud-stream
server.port=7070

# kafka message 主题设置
# 输入管道名称
spring.cloud.stream.bindings.order_input.destination=order
#spring.cloud.stream.bindings.order_input.binder=kafka1
# 输出管道名称
spring.cloud.stream.bindings.order_output.destination=order
#spring.cloud.stream.bindings.order_output.binder=kafka2
spring.cloud.stream.default-binder=kafka

#spring.cloud.stream.binders.kafka1.type=
#spring.cloud.stream.binders.kafka1.environment=
#spring.cloud.stream.binders.kafka2.type=

# kafka生产者、消费者、连接信息、序列化设置
# spring.kafka.bootstrap-servers=192.168.56.105:9092
spring.cloud.stream.kafka.binder.brokers=192.168.56.105:9092
spring.cloud.stream.kafka.binder.zkNodes=192.168.56.105:2181

# 是否开启分区功能
#spring.cloud.stream.bindings.order_input.consumer.partitioned=true

# 当前消费者的总实例数
#spring.cloud.stream.instance-count=2
# 当前实例的索引号
#spring.cloud.stream.instance-index=0

# 设置消息内容的类型
#spring.cloud.stream.bindings.output.contentType=

#spring.cloud.stream.bindings.output.destination=
#spring.cloud.stream.bindings.output.producer.partitionCount=

#spring.cloud.stream.bindings.order_input.group=consumerGroup
spring.kafka.consumer.group-id=consumerGroup
spring.kafka.producer.client-id=producer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.ByteArraySerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.ByteArraySerializer
